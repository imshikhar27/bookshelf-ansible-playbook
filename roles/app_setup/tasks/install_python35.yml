- name: Install build dependencies for Python 3.5
  apt:
    name:
      - build-essential
      - checkinstall
      - libreadline-dev
      - libncursesw5-dev
      - libssl-dev
      - libsqlite3-dev
      - tk-dev
      - libgdbm-dev
      - libc6-dev
      - libbz2-dev
      - libffi-dev
      - zlib1g-dev
      - wget
      - git
      - curl
    state: present
    update_cache: yes
  become: true

- name: Download Python 3.5.10 source code
  get_url:
    url: https://www.python.org/ftp/python/3.5.10/Python-3.5.10.tgz
    dest: /usr/src/Python-3.5.10.tgz
    mode: '0644'
  become: true

- name: Extract Python source
  unarchive:
    src: /usr/src/Python-3.5.10.tgz
    dest: /usr/src/
    remote_src: yes
  become: true

- name: Compile and install Python 3.5.10
  shell: |
    cd /usr/src/Python-3.5.10 >> {{ ansible_env.HOME }}/pyenv_install.log 2>&1
    ./configure --enable-optimizations >> {{ ansible_env.HOME }}/pyenv_install.log 2>&1
    make -j$(nproc) >> {{ ansible_env.HOME }}/pyenv_install.log 2>&1
    make altinstall >> {{ ansible_env.HOME }}/pyenv_install.log 2>&1
  args:
    creates: /usr/local/bin/python3.5
  become: true

- name: Install pyenv using official installer
  shell: |
    curl https://pyenv.run | bash  >> {{ ansible_env.HOME }}/pyenv_install.log 2>&1
  args:
    executable: /bin/bash
    chdir: "{{ ansible_env.HOME }}"
    creates: "{{ ansible_env.HOME }}/.pyenv"
  environment:
    HOME: "{{ ansible_env.HOME }}"
  become: false

- name: Set pyenv env vars in .bashrc (idempotent)
  lineinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    line: "{{ item.line }}"
    regexp: "{{ item.regexp }}"
    state: present
    create: yes
  loop:
    - { line: 'export PYENV_ROOT="$HOME/.pyenv"', regexp: '^export PYENV_ROOT=' }
    - { line: 'export PATH="$PYENV_ROOT/bin:$PATH"', regexp: '^export PATH=.*pyenv' }
    - { line: 'eval "$(pyenv init --path)"', regexp: '^eval "\$\((pyenv init --path)' }
    - { line: 'eval "$(pyenv init -)"', regexp: '^eval "\$\((pyenv init -)' }

- name: Source .bashrc from .bash_profile
  lineinfile:
    path: "{{ ansible_env.HOME }}/.bash_profile"
    line: '[[ -f ~/.bashrc ]] && source ~/.bashrc'
    state: present
    create: yes

- name: Check if pyenv virtualenv 'myenv35' exists
  stat:
    path: "{{ ansible_env.HOME }}/.pyenv/versions/myenv35"
  register: myenv35_exists

- name: Ensure pyenv Python and create virtualenv (only if missing)
  shell: |
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
    pyenv install -s 3.5.10  >> {{ ansible_env.HOME }}/pyenv_install.log 2>&1
    pyenv virtualenv 3.5.10 myenv35  >> {{ ansible_env.HOME }}/pyenv_install.log 2>&1
  args:
    executable: /bin/bash
  become: false
  when: not myenv35_exists.stat.exists


- name: Upgrade pip inside pyenv virtualenv
  shell: |
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
    pyenv activate myenv35  >> {{ ansible_env.HOME }}/pyenv_install.log 2>&1
    python -m pip install --upgrade pip >> {{ ansible_env.HOME }}/pyenv_install.log 2>&1
  args:
    executable: /bin/bash
  become: false

